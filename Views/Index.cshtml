<style>
    .red {
        margin-bottom: 0px;
        border-radius: 0px;
        background-color: rgba(255,199, 206, 1);
        color: rgb(156,0,6);
        font-weight: bolder;
        text-align: center;
    }

    .amber {
        margin-bottom: 0px;
        border-radius: 0px;
        background-color: rgba(255,235, 156, 1);
        color: rgb(156, 101, 0);
        font-weight: bolder;
        text-align: center;
    }

    .green {
        margin-bottom: 0px;
        border-radius: 0px;
        background-color: rgba(198,239, 206, 1);
        color: rgb(0,97, 0);
        font-weight: bolder;
        text-align: center;
    }

    .navbar-inverse .navbar-brand:hover {
        color: white;
    }

    .navbar-inverse {
        background-color: rgb(57, 168, 232);
    }

    .table > thead > tr > th {
        text-align: center;
    }

    .table > tfoot > tr > th {
        text-align: center;
    }

    .alert {
        margin-bottom: 0px;
        border-radius: 0px;
    }

    .k-grid-excel {
        color: rgb(0,97, 0);
        background-color: rgba(198,239, 206, 1);
    }

    .k-grid-pdf {
        color: rgb(156,0,6);
        background-color: rgba(255,199, 206, 1);
    }

    .k-grid-excel:hover {
        color: white;
        background-color: rgb(124, 203, 139);
    }

    .k-grid-pdf:hover {
        color: white;
        background-color: rgb(237, 151, 162);
    }
</style>

@Html.Partial("_Loader")

@(Html.Kendo().Grid<vm_Container>()
    .Name("grid")
    .DataSource(dataSource => dataSource
        .Ajax()
        .Model(p =>
        {
            p.Id(m => m.ID);
            p.Field(m => m.Type);
            p.Field(m => m.VoyageNo);
            p.Field(m => m.Port);
            p.Field(m => m.HaulierAC);
            p.Field(m => m.HaulierName);
            p.Field(m => m.DestinationOrigin);
            p.Field(m => m.BookingDate);
            p.Field(m => m.BookingTime);
            p.Field(m => m.GateDate);
            p.Field(m => m.GateTime);
            p.Field(m => m.DateCheck);
            p.Field(m => m.Band1);
            p.Field(m => m.Band2);
            p.Field(m => m.Band3);
            p.Field(m => m.Band4);
        })
        .Read(read => read.Action("Containers_Read", "Home", new { area = "" }))
        .ServerOperation(false)
    )
    .Events(evt =>
    {
        evt.DataBound("onDataBound");
        evt.ExcelExport("onExcelExport");
    })
    .ToolBar(toolbar =>
    {
        toolbar.Excel().Text("TO EXCEL").HtmlAttributes(new { @class = "pull-right" });
        toolbar.Pdf().Text("TO PDF").HtmlAttributes(new { @class = "pull-right" });
    })
    .Excel(excel => excel
        .FileName("Callover.xlsx")
        .Filterable(true)
        .ProxyURL(Url.Action("Excel_Export_Save", "Home"))
    )
    .Pdf(pdf => pdf
        .FileName("Callover.pdf")
        .AllPages()
        .ProxyURL(Url.Action("Pdf_Export_Save", "Home"))
    )
    .ClientDetailTemplateId("template")
    .Columns(column =>
    {
        column.Bound(c => c.ID)
            .Visible(false)
            .Width(150);
        column.Bound(c => c.ContainerNo)
            .Locked(false)
            .Width(135);
        column.Bound(c => c.Type)
            .Locked(false)
            .Width(78);
        column.Bound(c => c.VoyageNo)
            .Locked(false)
            .Width(117);
        column.Bound(c => c.Port)
            .Locked(false)
            .Width(75);
        column.Bound(c => c.HaulierAC)
            .Locked(false)
            .Width(124);
        column.Bound(c => c.HaulierName)
            .Locked(false)
            .Width(140);
        column.Bound(c => c.DestinationOrigin)
            .Locked(false)
            .Width(125);
        column.Bound(c => c.BookingDate)
            .Locked(false)
            .Filterable(f =>
            {
                f.UI(GridFilterUIRole.DateTimePicker);
            })
            .Format("{0:dd/MM/yyyy}")
            .Width(155);
        column.Bound(c => c.BookingTime)
            .Title("Booking Time")
            .Locked(false)
            .Filterable(f =>
            {
                f.UI(GridFilterUIRole.TimePicker);
            })
            .Format("{0:HH:mm:ss}")
            .Width(155);
        column.Bound(c => c.GateDate)
            .Locked(false)
            .Filterable(f =>
            {
                f.UI(GridFilterUIRole.DateTimePicker);
            })
            .Format("{0:dd/MM/yyyy}")
            .Width(155);
        column.Bound(c => c.GateTime)
            .Title("Gate Time")
            .Locked(false)
            .Filterable(f =>
            {
                f.UI(GridFilterUIRole.TimePicker);
            })
            .Format("{0:HH:mm:ss}")
            .Width(155);
        column.Bound(c => c.DateCheck)
            .HeaderHtmlAttributes(new { style = "font-weight:bold;background-color: #9BC2E6;" })
            .Visible(false)
            .Width(125);
        column.Bound(c => c.Band1)
            .Visible(true)
            .Hidden(true)
            .Width(150);
        column.Bound(c => c.Band2)
            .Visible(true)
            .Hidden(true)
            .Width(150);
        column.Bound(c => c.Band3)
            .Visible(true)
            .Hidden(true)
            .Width(150);
        column.Bound(c => c.Band4)
            .Visible(true)
            .Hidden(true)
            .Width(150);
    })
    .Editable(ed => ed
        .Mode(GridEditMode.PopUp)
        .TemplateName("PopUpTemplate")
    )
    .Groupable()
    .Mobile(MobileMode.Auto)
    .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(new int[] { 5, 10, 20, 50, 100 })
        .ButtonCount(5)
        .Messages(msg => msg.Empty("No records to display"))
    )
    .ColumnMenu()
    .Sortable(s => s.SortMode(GridSortMode.MultipleColumn))
    .Scrollable()
    .Filterable()
    .Editable(editable => editable.Mode(GridEditMode.PopUp))
    .Resizable(resize => resize.Columns(true))
    .Reorderable(reorder => reorder.Columns(true))
    .HtmlAttributes(new { @class = "kendoGrid", @style = "height:800px;max-height:100%;" })
)

<script src="~/Scripts/kendo/2017.1.223/pako_deflate.min.js"></script>

<script>
    $(document).ready(function () {
        var grid = $('#grid').data('kendoGrid');
    });

    $(window).load(function () {
        $(".loader").fadeOut();
    })
</script>


<script id="template" type="text/kendo-tmpl">
    <table class="table table-condensed table-bordered">
        <thead>
            <tr>
                <th>Band 1</th>
                <th>Band 2</th>
                <th>Band 3</th>
                <th>Band 4</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td class="#=valCheck(Band1)#">#= Band1 #</td>
                <td class="#=valCheck(Band2)#">#= Band2 #</td>
                <td class="#=valCheck(Band3)#">#= Band3 #</td>
                <td class="#=valCheck(Band4)#">#= Band4 #</td>
            </tr>
        </tbody>
        <tfoot>
            <tr>
                <th>+180 mins</th>
                <th>+120 mins</th>
                <th>+60 mins</th>
                <th>+0 min</th>
            </tr>
        </tfoot>
    </table>
</script>

<script>
    var rowTemplate = kendo.template($('#alt-template').html());
</script>


<script type="text/javascript">
    var exportFlag = false;
    function onExcelExport(e) {
        var data = e.sender.dataSource.data();
        var sheet = e.workbook.sheets[0];
        var options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };

        for (var rowIndex = 1; rowIndex < sheet.rows.length; rowIndex++) {
            var row = sheet.rows[rowIndex];

            var bookingTime = row.cells[8].value;
            var gateTime = row.cells[10].value;

            row.cells[8].value = (bookingTime) ? moment(bookingTime).format('HH:mm:ss') : "";
            row.cells[10].value = (gateTime) ? moment(gateTime).format('HH:mm:ss') : "";


            for (var cellIndex = 0; cellIndex < (row.cells.length) ; cellIndex++) {
                var cell = row.cells[cellIndex];

                if (data[rowIndex - 1].DateCheck == "ON DATE") {
                    row.cells[cellIndex].background = "#C6EFCE";
                } else {
                    row.cells[cellIndex].background = "#FFC7CE";
                }
            }
        }

        if (!exportFlag) {
            e.sender.showColumn("Band1");
            e.sender.showColumn("Band2");
            e.sender.showColumn("Band3");
            e.sender.showColumn("Band4");
            e.preventDefault();

            exportFlag = true;
            setTimeout(function () {
                e.sender.saveAsExcel();
            });
        } else {
            e.sender.hideColumn("Band1");
            e.sender.hideColumn("Band2");
            e.sender.hideColumn("Band3");
            e.sender.hideColumn("Band4");
            exportFlag = false;
            e.sender.resize();
        }
    }

    function onDataBound(e) {
        var grid = $("#" + e.sender.table.prevObject[0].id).data("kendoGrid");

        grid.tbody.find('>tr.k-master-row').each(function () {
            var dataItem = grid.dataItem(this);

            changeRow($(this), dataItem.DateCheck);
        });
    }

    function changeRow(row, value) {
        if (value == "CHECK") {
            row.addClass("red");
            row.removeClass("green");
            row.removeClass("amber");
        }

        if (value == "ON DATE") {
            row.addClass("green");
            row.removeClass("amber");
            row.removeClass("red");
        }

        if (value == "CHECK 1" || value == "CHECK 2" || value == "CHECK 3" || value == "CHECK 4") {
            row.addClass("amber");
            row.removeClass("green");
            row.removeClass("red");
        }

        if (value == "LATE") {
            row.addClass("red");
            row.removeClass("green");
            row.removeClass("amber");
        }

        if (value == "ON TIME") {
            row.addClass("green");
            row.removeClass("amber");
            row.removeClass("red");
        }
    }

    function valCheck(value) {
        if (value == "CHECK")
            return "red";

        if (value == "ON DATE")
            return "green";

        if (value == "CHECK 1" || value == "CHECK 2" || value == "CHECK 3" || value == "CHECK 4")
            return "amber";

        if (value == "LATE")
            return "red";

        if (value == "ON TIME")
            return "green";
    }
</script>
